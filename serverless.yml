org: carlosapr01
app: serverless-auth-with-cognito
service: sls-auth-cognito
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  region: us-east-2
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:scan
            - dynamodb:PutItem
          Resource: arn:aws:dynamodb:us-east-2:*:table/data_bank
        - Effect: Allow
          Action:
            - cognito-idp:AdminConfirmSignUp
          Resource: arn:aws:cognito-idp:us-east-2:261834676998:userpool/us-east-2_RLHJC7R1L
  environment:
    tablename: data_bank

plugins:
  - serverless-offline
  - serverless-pydeps


package: 
  individually: True
  patterns:
    - "!*/**"
    - "!**"

functions:
  get_data:
    handler: data_bank/my_data.data
    package: 
      patterns:
        - "data_bank/my_data.py"
    events:
      - http:
          path: v1/bank
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  create_data:
    handler: create_data_bank/create.create
    package: 
      patterns:
        - "create_data_bank/create.py"
    events:
      - http:
          path: v1/bank
          method: post
          request:
            schemas:
              application/json: ${file(api-schema.json)}

  sign_up:
    handler: auth/signup.signup
    package:
      patterns:
        - "auth/signup.py"
    events:
      - http:
          path: v1/signup
          method: post
          request:
            schemas:
              application/json: ${file(signup.json)}
    
  sign_in:
    handler: auth/signin.signin
    package:
      patterns:
        - "auth/signin.py"
    events:
      - http:
          path: v1/signin
          method: post

resources:
  Resources:
    tableDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.tablename}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        Name: Cognito
        RestApiId: fp6kemr57e
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - arn:aws:cognito-idp:us-east-2:261834676998:userpool/us-east-2_RLHJC7R1L

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Generate a name based on the stage
        UserPoolName: ${self:provider.stage}-user-pool
        # Set email as an alias
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH # See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        GenerateSecret: false

  # Print out the Id of the User Pool that is created
  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool

    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient